//Extended string object methods
        //  *

        // * @uml
        // * @startyaml
        // * string : " [mutate <b>string</b>] "
        // * .bold: "//<b>//string</b>"
        // * .italic: "//<i>//string</i>"
        // * .underline: "//<u>//string</u>"
        // * .strike: "//<s>//string</s>"
        // * .sup: "//<sup>//string</sup>"
        // * .sub: "//<sub>//string</sub>"
        // * .mark: "//<mark>//string</mark>"
        // * .remove_character_last: "Removes last character"
        // * .remove_bold: "<s>//<b>//</s>string<s></b></s>"
        // * .remove_italic: "<s>//<i>//</s>string<s></i></s>"
        // * .remove_underline: "<s>//<u>//</s>string<s></u></s>"
        // * .remove_strike: "<s>//<s>//</s>string<s></s></s>"
        // * .remove_sup: "<s>//<sup>//</s>string<s></sup></s>"
        // * .remove_sub: "<s>//<sub>//</s>string<s></sub></s>"
        // * .remove_mark: "<s>//<mark>//</s>string<s></mark></s>"        
        // * @enduml
//v1.0 by Svarii
    //@name color
        //  *
        //  * @uml
        //  * @startuml
        //  * title string.color
        //  * header
        //  * The **.color** function is used to apply
        //  * - specific hex #color codes.
        //  * - basic css color names
        //  * endheader        
        //  * entity StringObject
        //  * control ".color" as color
        //  * StringObject -> color : .color("blue")
        //  * color -> StringObject : "<color=blue>string</color>"
        //  * @enduml               
        //
        //  * **Description:**
        //  * Applies a color to the given text.
        //  * @description     
        //  * Color values maybe be #**FFFFFF** or **color** format
        //  * @param {string} colorValue - The color to apply.
        //  * @return {string} - The colorized text.
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example
        //  * result = newString.color("blue");
        //  * @example
        //  * print(result); // Outputs: <color=blue>Hello</color>
        //  * @example
        //  * @example
        //  * result = newString.color("#FFFFFF");
        //  * @example
        //  * print(result); // Outputs: <color=#FFFFFF>Hello</color>   
        // ANCHOR string.color    
    string.color = function(colorValue = "red")
    if not typeof(colorValue) == "string" then return null
    return "<color=" + colorValue + ">" + self + "</color>"
    end function
    //@name bold
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".bold" as bold
        //  * StringObject -> bold : string
        //  * bold -> StringObject : //<b>//string//</b>//
        //  * @enduml        
        //    
        //  * **Description:**
        //  * Applies bold to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.bold
        //  * @example
        //  * print(result); // Outputs: <b>Hello</b>
        //  *
        // ANCHOR string.bold
    string.bold = function()
        return "<b>" + self + "</b>"
    end function
    //@name italic
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".italic" as italic
        //  * StringObject -> italic : string
        //  * italic -> StringObject : //<i>//string//</i>//
        //  * @enduml        
        //         
        //  * **Description:**
        //  * Applies italic to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.italic
        //  * @example
        //  * print(result); // Outputs: <i>Hello</i>
        //  *
        // ANCHOR string.italic
    string.italic = function()
        return "<i>" + self + "</i>"
    end function 
    //@name underline 
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".underline" as underline
        //  * StringObject -> underline : string
        //  * underline -> StringObject : //<u>//string//</u>//
        //  * @enduml        
        //            
        //  * **Description:**
        //  * Applies underline to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.underline
        //  * @example
        //  * print(result); // Outputs: <u>Hello</u>
        //  *
        // ANCHOR string.underline
    string.underline = function()
        return "<u>" + self + "</u>"
    end function
    //@name strike
            //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".strike" as strike
        //  * StringObject -> strike : string
        //  * strike -> StringObject : //<s>//string//</s>//
        //  * @enduml        
        //  
        //  * **Description:**
        //  * Applies strikethrough to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.strike
        //  * @example
        //  * print(result); // Outputs: <s>Hello</s>
        //  *
        // ANCHOR string.strike
    string.strike = function()
        return "<s>" + self + "</s>"
    end function
    //@name mark
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".mark" as mark
        //  * StringObject -> mark : string
        //  * mark -> StringObject : //<mark>//string//</mark>//
        //  * @enduml        
        //       
        //  * **Description:**
        //  * Applies mark to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.mark
        //  * @example
        //  * print(result); // Outputs: <mark>Hello</mark>
        //  *
        // ANCHOR string.mark
    string.mark = function()
        return "<mark>" + self + "</mark>"
    end function
    //@name sub
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sub" as sub
        //  * StringObject -> sub : string
        //  * sub -> StringObject : //<sub>//string//</sub>//
        //  * @enduml        
        //            
        //  * **Description:**
        //  * Applies subscript to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.sub
        //  * @example
        //  * print(result); // Outputs: <sub>Hello</sub>
        //  *    
        // ANCHOR string.sub
    string.sub = function()
        return "<sub>" + self + "</sub>"    
    end function
    //@name sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sup" as sup
        //  * StringObject -> sup : string
        //  * sup -> StringObject : //<sup>//string//</sup>//
        //  * @enduml        
        //                 
        //  * **Description:**
        //  * Applies superscript to the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.sup
        //  * @example
        //  * print(result); // Outputs: <sup>Hello</sup>
        //  * 
        // ANCHOR string.sup   
    string.sup = function()
        return "<sup>" + self + "</sup>"    
    end function                             
    //@name remove_char_last
        //  *
        //  * @uml
        //  * @startuml
        //  * title string.remove_char_last
        //  * entity StringObject
        //  * control ".remove_char_last" as remove_char_last
        //  * StringObject -> remove_char_last : string
        //  * remove_char_last -> StringObject : strin
        //  * footer Removes the last char from a string object
        //  * @enduml        
        //        
        //  * **Description:**
        //  * Remove the last char of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "Hello"
        //  * @example
        //  * @example        
        //  * result = newString.remove_char_last
        //  * @example
        //  * print(result); // Outputs: Hell
        //  *      
        // ANCHOR string.remove_char_last  
    string.remove_char_last = function(index = (self.len - 1))
        charList = self.values
        return charList.remove(index)
    end function
    //@name remove_bold
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_bold" as remove_bold
        //  * StringObject -> remove_bold : //<b>//string//</b>//
        //  * remove_bold -> StringObject : string
        //  * StringObject -> remove_bold : //<b>//string//</b>// //<b>//string//</b>//
        //  * remove_bold -> StringObject : string string   
        //  * @enduml        
        //              
        //  * **Description:**
        //  * Remove the bold tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<b>Hello</b>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_bold
        //  * @example
        //  * print(result); // Outputs: Hello
        //  *  
        // ANCHOR string.remove_bold
    string.remove_bold = function()
        newString = self.remove("<b>")
        return newString.remove("</b>")
    end function
    //@name remove italic 
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_italic" as remove_italic
        //  * StringObject -> remove_italic : //<i>//string//</i>//
        //  * remove_italic -> StringObject : string
        //  * StringObject -> remove_italic : //<i>//string//</i>// //<i>//string//</i>//
        //  * remove_italic -> StringObject : string string   
        //  * @enduml        
        //              
        //  * **Description:**
        //  * Remove the italic tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<i>Hello</i>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_italic
        //  * @example
        //  * print(result); // Outputs: Hello
        //  *  
        // ANCHOR string.remove_italic
    string.remove_italic = function()
        newString = self.remove("<i>")
        return newString.remove("</i>")
    end function                
    //@name remove_underline
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_underline" as remove_underline
        //  * StringObject -> remove_underline : //<u>//string//</u>//
        //  * remove_underline -> StringObject : string
        //  * StringObject -> remove_underline : //<u>//string//</u>// //<u>//string//</u>//
        //  * remove_underline -> StringObject : string string   
        //  * @enduml        
        //               
        //  * **Description:**
        //  * Remove the underline tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<u>Hello</u>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_underline
        //  * @example
        //  * print(result); // Outputs: Hello
        //  * 
        // ANCHOR string.remove_underline
    string.remove_underline = function()
        newString = self.remove("<u>")
        return newString.remove("</u>")
    end function                
    //@name strike    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_strike" as remove_strike
        //  * StringObject -> remove_strike : //<s>//string//</s>//
        //  * remove_strike -> StringObject : string
        //  * StringObject -> remove_strike : //<s>//string//</s>// //<s>//string//</s>//
        //  * remove_strike -> StringObject : string string   
        //  * @enduml        
        //                
        //  * Remove the strike tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<s>Hello</s>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_strike
        //  * @example
        //  * print(result); // Outputs: Hello
        //  * 
        // ANCHOR string.remove_strike
    string.remove_strike = function()
        newString = self.remove("<s>")
        return newString.remove("</s>")
    end function                
    //@name mark    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_mark" as remove_mark
        //  * StringObject -> remove_mark : //<mark>//string//</mark>//
        //  * remove_mark -> StringObject : string
        //  * StringObject -> remove_mark : //<mark>//string//</mark>// //<mark>//string//</mark>//
        //  * remove_mark -> StringObject : string string   
        //  * @enduml        
        //                
        //  * Remove the mark tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<mark>Hello</mark>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_mark
        //  * @example
        //  * print(result); // Outputs: Hello
        //  * 
        // ANCHOR string.remove_mark
    string.remove_mark = function()
        newString = self.remove("<mark>")
        return newString.remove("</mark>")
    end function
    //@name remove_sub    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sub" as remove_sub
        //  * StringObject -> remove_sub : //<sub>//string//</sub>//
        //  * header string.remove_sub
        //  * remove_sub -> StringObject : string
        //  * StringObject -> remove_sub : //<sub>//string//</sub>// //<sub>//string//</sub>//
        //  * remove_sub -> StringObject : string string   
        //  * @enduml        
        //                
        //  * Remove the sub tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<sub>Hello</sub>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_sub
        //  * @example
        //  * print(result); // Outputs: Hello
        //  * 
        // ANCHOR string.remove_sub
    string.remove_sub = function()
        newString = self.remove("<sub>")
        return newString.remove("</sub>")
    end function                
    //@name remove_sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sup" as remove_sup
        //  * StringObject -> remove_sup : //<sup>//string//</sup>//
        //  * header string.remove_sup
        //  * remove_sup -> StringObject : string
        //  * StringObject -> remove_sup : //<sup>//string//</sup>// //<sup>//string//</sup>//
        //  * remove_sup -> StringObject : string string   
        //  * @enduml        
        //       
        //  * **Description:**
        //  * Remove the superscript tag of the given text.
        //  *
        //  * @return {string}
        //  * @example
        //  * newString = "<sup>Hello</sup>"
        //  * @example
        //  * @example        
        //  * result = newString.remove_sup
        //  * @example
        //  * print(result); // Outputs: Hello
        //  * 
        // ANCHOR string.remove_sup
    string.remove_sup = function()
        newString = self.remove("<sup>")
        return newString.remove("</sup>")
    end function                                
//Extended number object methods
//v1.0 by Svarii
        //  *
        // * @uml
        // * @startyaml
        // * number : " [calculate <b>number</b>] "
        // * .plus(x): "adds x=1"
        // * .minus(x): "subtract x=1"
        // * .diff(x): "distance to x=0"
        // * .greater_than: "true / false"
        // * .lesser_than: "true / false"
        // * .random_from(min=0): random in range
        // * @enduml
    //@name plus   
        //
        //  * **Description:**
        //  * Add 1 to the number or opt: amount
        //  * @description     
        //  * @param {opt:number} amount - The amount to add.
        //  * @return {number | string on type error} - The result of the addition.
        //  * @example
        //  * newNumber = 40
        //  * @example
        //  * @example
        //  * result = newNumber.plus(2);
        //  * @example
        //  * print(result); // Outputs: 42
        //  *
        // ANCHOR number.plus
    number.plus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self + amount
    end function
    //@name minus   
        //
        //  * **Description:**
        //  * Subtrac 1 from the number or opt: amount
        //  * @description     
        //  * @param {opt:number} amount - The amount to add.
        //  * @return {number | string on type error} - The result of the subtraction.
        //  * @example
        //  * newNumber = 44
        //  * @example
        //  * @example
        //  * result = newNumber.minus(2);
        //  * @example
        //  * print(result); // Outputs: 42
        //  * @example
        //  *     
        // ANCHOR number.minus
    number.minus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self - amount
    end function
    //@name diff   
        //
        //  * **Description:**
        //  * Return Difference from provided integer to distanceTo
        //  * @description     
        //  * @param {number} amount
        //  * @return {number | string on type error} - The result of the subtraction.
        //  * @example
        //  * newNumber = 44;
        //  * newNumber2 = 2;            
        //  * @example
        //  * @example
        //  * result = newNumber.diff(newNumber2);
        //  * @example
        //  * print(result); // Outputs: 42
        //  * @example
        //  *       
        // ANCHOR number.diff      
    number.diff = function(distanceTo = 0)
        if not typeof(distanceTo) == "number" then return null
            return abs(self - distanceTo)
    end function
    //@name greater_than   
        //
        //  * **Description:**
        //  * Check if number is greater than provided number
        //  * @description     
        //  * @param {number} isGreater
        //  * @return {bool number | string on type error} - The result of the subtraction.
        //  * @example
        //  * myNumber = 42;
        //  * myNumber2 = 100;
        //  * @example
        //  * @example
        //  * result = newNumber.greater_than(myNumber2);
        //  * @example
        //  * print(result); // Outputs: 0
        //  * @example
        //  *      
        // ANCHOR number.greater_than    
    number.greater_than = function(isGreater)
        if not typeof(isGreater) == "number" then return null
            if isGreater > self then return true
            return false
    end function
    //@name lesser_than   
        //
        //  * **Description:**
        //  * Check if number is lesser than provided number
        //  * @description     
        //  * @param {number} amount
        //  * @return {bool number | string on type error} - The result of the subtraction.
        //  * @example
        //  * myNumber = 42;
        //  * myNumber2 = 100;
        //  * @example
        //  * @example
        //  * result = newNumber.lesser_than(myNumber2);
        //  * @example
        //  * print(result); // Outputs: 1
        //  * @example
        //  *     
        // ANCHOR number.lesser_than           
    number.lesser_than = function(isLesser)
        if not typeof(isLesser) == "number" then return null
            if isLesser < self then return true
            return false
    end function
    // ## Section Title
    // This is some documentation written in Markdown.
    // - Bullet point 1
    // - Bullet point 2
    //@name random_from   
        //
        //  * **Description:**
        //  * Generate a random number from 1 to number opt: min
        //  * @description     
        //  * @param {number} amount
        //  * @return {bool number | string on type error} - The result of the subtraction.
        //  * @example
        //  * myNumber = 100;
        //  * @example
        //  * @example
        //  * result = myNumber.random_from(50);
        //  * @example
        //  * print(result); // Outputs: {rnd:50-100}
        //  * @example
        //  *    
        // ANCHOR number.random_from
    number.random_from = function(min = 0)
        if not typeof(min) == "number" then return null
            max = self
            return floor((rnd * (max - min + 1)) + min)  
    end function

//LIST FUNCTIONS
//.trim removes zero length list items at start and end
list.trim = function()
	while not self[self.len - 1].len > 0
        self.remove(self.len - 1)
    end while
	while not self[0].len > 0
        self.remove(0)
    end while
	return self
end function