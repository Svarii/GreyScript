//Extended number object methods

        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Add 1 to the number or opt: amount
            //  * @description     
            //  * @param {opt:number} amount - The amount to add.
            //  * @return {number | string on type error} - The result of the addition.
            //  * @example
            //  * newNumber = 40
            //  * @example
            //  * @example
            //  * result = newNumber.plus(2);
            //  * @example
            //  * print(result); // Outputs: 42
            //  *
            number.plus = function(amount = 1)
                if not typeof(amount) == "number" then return "Error: number.plus passed object type of " + typeof(amount) + ", number required"
                    return self + amount
                end function
        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Subtrac 1 from the number or opt: amount
            //  * @description     
            //  * @param {opt:number} amount - The amount to add.
            //  * @return {number | string on type error} - The result of the subtraction.
            //  * @example
            //  * newNumber = 44
            //  * @example
            //  * @example
            //  * result = newNumber.minus(2);
            //  * @example
            //  * print(result); // Outputs: 42
            //  * @example
            //  *     
            number.minus = function(amount = 1)
                if not typeof(amount) == "number" then return "Error: number.minus passed object type of " + typeof(amount) + ", number required"
                    return self - amount
            end function
        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Return Difference from provided integer to distanceTo
            //  * @description     
            //  * @param {number} amount - The amount to add.
            //  * @return {number | string on type error} - The result of the subtraction.
            //  * @example
            //  * newNumber = 44;
            //  * newNumber2 = 2;            
            //  * @example
            //  * @example
            //  * result = newNumber.diff(newNumber2);
            //  * @example
            //  * print(result); // Outputs: 42
            //  * @example
            //  *             
            number.diff = function(distanceTo)
                if not typeof(distanceTo) == "number" then return "Error: number.difference passed object type of " + typeof(distanceTo) + ", number required"
                    return abs(self - distanceTo)
                    return 
            end function
        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Check if number is greater than provided number
            //  * @description     
            //  * @param {number} isGreater - The amount to add.
            //  * @return {bool number | string on type error} - The result of the subtraction.
            //  * @example
            //  * myNumber = 42;
            //  * myNumber2 = 100;
            //  * @example
            //  * @example
            //  * result = newNumber.greater_than(myNumber2);
            //  * @example
            //  * print(result); // Outputs: 0
            //  * @example
            //  *          
            number.greater_than = function(isGreater)
                if not typeof(isGreater) == "number" then return "Error: number.greater_than passed object type of " + typeof(isGreater) + ", number required"
                    if isGreater > self then return true
                    return false
            end function
        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Check if number is lesser than provided number
            //  * @description     
            //  * @param {number} amount - The amount to add.
            //  * @return {bool number | string on type error} - The result of the subtraction.
            //  * @example
            //  * myNumber = 42;
            //  * myNumber2 = 100;
            //  * @example
            //  * @example
            //  * result = newNumber.lesser_than(myNumber2);
            //  * @example
            //  * print(result); // Outputs: 1
            //  * @example
            //  *                
            number.lesser_than = function(isLesser)
                if not typeof(isLesser) == "number" then return "Error: number.lesser_than passed object type of " + typeof(isLesser) + ", number required"
                    if isLesser < self then return true
                    return false
            end function
        //v1.0 by Svarii
        //@description   
            //
            //  * **Description:**
            //  * Generate a random number from 1 to number opt: min
            //  * @description     
            //  * @param {number} amount - The amount to add.
            //  * @return {bool number | string on type error} - The result of the subtraction.
            //  * @example
            //  * myNumber = 100;
            //  * @example
            //  * @example
            //  * result = myNumber.random_from(50);
            //  * @example
            //  * print(result); // Outputs: {rnd:50-100}
            //  * @example
            //  *    
            number.random_from = function(min = 1)
                if not typeof(min) == "number" then return "Error: number.random_from passed object type of " + typeof(min) + ", number required"
                    max = self
                    return floor((rnd * (max - min + 1)) + min)  
            end function            